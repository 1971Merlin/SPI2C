0001   0000             ; ----------------------------------------------------------------------------
0002   0000             ;
0003   0000             ;	Game of Life for TEC SPI2C board with Nokia 5110 LCD
0004   0000             ;
0005   0000             ;	Designed to compile for the TEC-1 or SC-1 as the target machine
0006   0000             ;
0007   0000             ;	Assemble with TASM using the command line options -80 -g0
0008   0000             ;
0009   0000             ;	Copyright (C) 2022h, Craig Hart. Distributed under the GPLv3 license
0010   0000             ;
0011   0000             ;	https://github.com/1971Merlin/SPI2C
0012   0000             ;
0013   0000             ; ----------------------------------------------------------------------------
0014   0000             
0015   0000             
0016   0000             ; ----------------------------------------------------------------------------
0017   0000             ; conditional defines - set the target machine platform
0018   0000             ; ----------------------------------------------------------------------------
0019   0000             
0020   0000             
0021   0000             #define debug
0022   0000             
0023   0000             ; #define random
0024   0000             
0025   0000             
0026   0000             ; using spi2c's onboard 74ls138 IO ports
0027   0000             spiport	.equ 42h
0028   0000             
0029   0000             ; start address for SC-1 code. change to 0900h for TEC-1
0030   2000             	.org 2000h
0031   2000             
0032   2000             
0033   2000             
0034   2000             #ifdef debug
0035   2000             
0036   2000             ; SC-1 7-seg ports
0037   2000             disscan .equ	85h
0038   2000             disseg	.equ	84h
0039   2000             
0040   2000             #endif
0041   2000             
0042   2000             
0043   2000             ; ----------------------------------------------------------------------------
0044   2000             ; hardware initialization code starts here
0045   2000             ; ----------------------------------------------------------------------------
0046   2000             
0047   2000             ; reset spi bus to idle state
0048   2000 0E 42       	ld c,spiport	; reset CS = 1
0049   2002 3E FF       	ld a,0ffh	; Raise CS
0050   2004 ED 79       	out (c),a
0051   2006             
0052   2006             
0053   2006             ; write init to the 5110 display
0054   2006             
0055   2006 1E 21       	ld e,21h		; complex mode
0056   2008 16 00       	ld d,00h
0057   200A CD C1 21    	call spi_wr
0058   200D             
0059   200D 1E B9       	ld e,0b9h		; set vOP
0060   200F 16 00       	ld d,00h
0061   2011 CD C1 21    	call spi_wr
0062   2014             
0063   2014 1E 04       	ld e,04h		; temp coeficcient
0064   2016 16 00       	ld d,00h
0065   2018 CD C1 21    	call spi_wr
0066   201B             
0067   201B 1E 14       	ld e,14h		; lcd bias
0068   201D 16 00       	ld d,00h
0069   201F CD C1 21    	call spi_wr
0070   2022             
0071   2022             
0072   2022             #ifndef random
0073   2022             
0074   2022             ; setup our starting point life
0075   2022             ; first clear buffer b
0076   2022             
0077   2022 01 F7 01    	ld bc,503		; n-1
0078   2025 21 DF 23    	ld hl,buffb
0079   2028 11 DF 23    	ld de,buffb
0080   202B 13          	inc de
0081   202C 36 00       	ld (hl),0		; zero fill
0082   202E ED B0       	ldir
0083   2030             
0084   2030             
0085   2030             ; seed the starting point into the buffer
0086   2030             
0087   2030 06 2A       	ld b,42
0088   2032 0E 1F       	ld c,31
0089   2034 3E 01       	ld a,1
0090   2036 CD 93 21    	call putpixel
0091   2039             
0092   2039 06 2B       	ld b,43
0093   203B 0E 1F       	ld c,31
0094   203D 3E 01       	ld a,1
0095   203F CD 93 21    	call putpixel
0096   2042             
0097   2042 06 2C       	ld b,44
0098   2044 0E 1F       	ld c,31
0099   2046 3E 01       	ld a,1
0100   2048 CD 93 21    	call putpixel
0101   204B             
0102   204B 06 2C       	ld b,44
0103   204D 0E 20       	ld c,32
0104   204F 3E 01       	ld a,1
0105   2051 CD 93 21    	call putpixel
0106   2054             
0107   2054 06 2C       	ld b,44
0108   2056 0E 21       	ld c,33
0109   2058 3E 01       	ld a,1
0110   205A CD 93 21    	call putpixel
0111   205D             
0112   205D 06 2A       	ld b,42
0113   205F 0E 20       	ld c,32
0114   2061 3E 01       	ld a,1
0115   2063 CD 93 21    	call putpixel
0116   2066             
0117   2066             
0118   2066             ; copy buffb to buffa because putpixel goes to buffb
0119   2066 01 F8 01    	ld bc,504
0120   2069 21 DF 23    	ld hl,buffb
0121   206C 11 E7 21    	ld de,buffa
0122   206F ED B0       	ldir
0123   2071             
0124   2071             #endif
0125   2071             
0126   2071             
0127   2071             #ifdef debug
0128   2071             
0129   2071             ; setup debugging - enable LHD 7-seg display
0130   2071 0E 85       	ld c,disscan
0131   2073 3E 20       	ld a,20h
0132   2075 ED 79       	out (c),a
0133   2077             #endif
0134   2077             
0135   2077             
0136   2077~            #ifdef random
0137   2077~            
0138   2077~            ; seed random number generator
0139   2077~            
0140   2077~            	ld a,r			; grab a random number
0141   2077~            	ld (rndData),a
0142   2077~            
0143   2077~            
0144   2077~            ; random fill buffa to start the game
0145   2077~            
0146   2077~            	ld bc,504
0147   2077~            	ld hl,buffa
0148   2077~            
0149   2077~            
0150   2077~            floop:	call getrandom
0151   2077~            
0152   2077~            	ld (hl),a
0153   2077~            	inc hl
0154   2077~            
0155   2077~            	dec bc
0156   2077~            	ld a,b
0157   2077~            	or c
0158   2077~            	jp nz,floop
0159   2077~            
0160   2077             #endif
0161   2077             
0162   2077             
0163   2077             ; ----------------------------------------------------------------------------
0164   2077             ; main program loop
0165   2077             ; ----------------------------------------------------------------------------
0166   2077             
0167   2077             
0168   2077             mainloop:
0169   2077             
0170   2077             ; write buffer a to display
0171   2077             ; setup LCD
0172   2077             
0173   2077 1E 20       	ld e,20h		; simple mode
0174   2079 16 00       	ld d,00h
0175   207B CD C1 21    	call spi_wr
0176   207E             
0177   207E 1E 40       	ld e,40h		; Y = 0
0178   2080 16 00       	ld d,00h
0179   2082 CD C1 21    	call spi_wr
0180   2085             
0181   2085 1E 80       	ld e,80h		; X = 0
0182   2087 16 00       	ld d,00h
0183   2089 CD C1 21    	call spi_wr
0184   208C             
0185   208C 1E 0C       	ld e,0ch		; normal mode
0186   208E 16 00       	ld d,00h
0187   2090 CD C1 21    	call spi_wr
0188   2093             
0189   2093             ; Send pixels to 5110 display from buffer a
0190   2093 01 F8 01    	ld bc,504
0191   2096 21 E7 21    	ld hl,buffa
0192   2099             
0193   2099 7E          fillcd:	ld a,(HL)
0194   209A 5F          	ld e,a
0195   209B 16 08       	ld d,08h
0196   209D CD C1 21    	call spi_wr
0197   20A0             
0198   20A0 23          	inc hl
0199   20A1 0B          	dec bc
0200   20A2             
0201   20A2 78          	ld a,b
0202   20A3 B1          	or c
0203   20A4 20 F3       	jr nz, fillcd
0204   20A6             
0205   20A6             
0206   20A6             
0207   20A6             ; perform an iteration of G.O.L. to buffer B
0208   20A6             
0209   20A6             ; first clear buffer b to all zeros
0210   20A6             
0211   20A6 01 F7 01    	ld bc,503		; n-1
0212   20A9 21 DF 23    	ld hl,buffb
0213   20AC 11 DF 23    	ld de,buffb
0214   20AF 13          	inc de
0215   20B0 36 00       	ld (hl),0		; zero fill
0216   20B2 ED B0       	ldir
0217   20B4             
0218   20B4             
0219   20B4             ; now iterate each cell and test it
0220   20B4             ; we skip the edges as then we don't have to do bounds checking
0221   20B4             ; edges are always 0's...dead.
0222   20B4             
0223   20B4 26 01       	ld h, 1			; x=1
0224   20B6             
0225   20B6             touter:
0226   20B6 2E 01       	ld l, 1			; y=1
0227   20B8             
0228   20B8             
0229   20B8             #ifdef debug
0230   20B8 0E 84       	ld c,disseg
0231   20BA 3A D9 25    	ld a,(flag)
0232   20BD EE 01       	xor 01h
0233   20BF 32 D9 25    	ld (flag),a
0234   20C2 ED 79       	out (c),a
0235   20C4             #endif
0236   20C4             
0237   20C4             tinner:
0238   20C4             
0239   20C4             #ifdef debug
0240   20C4 0E 84       	ld c,disseg
0241   20C6 3A D9 25    	ld a,(flag)
0242   20C9 EE 08       	xor 08h
0243   20CB 32 D9 25    	ld (flag),a
0244   20CE ED 79       	out (c),a
0245   20D0             #endif
0246   20D0             
0247   20D0             ; test a pixel block to see if neighbours are alive or dead
0248   20D0             
0249   20D0 16 00       	ld d,0		; result count
0250   20D2             
0251   20D2             ; top row
0252   20D2 44          	ld b,h	; x-1
0253   20D3 05          	dec b
0254   20D4 4D          	ld c,l	; y-1
0255   20D5 0D          	dec c
0256   20D6             
0257   20D6 CD 67 21    	call getpixel
0258   20D9 82          	add a,d		; increment result
0259   20DA 57          	ld d,a		; and store it
0260   20DB 04          	inc b
0261   20DC             
0262   20DC CD 67 21    	call getpixel
0263   20DF 82          	add a,d		; increment result
0264   20E0 57          	ld d,a		; and store it
0265   20E1 04          	inc b
0266   20E2             
0267   20E2 CD 67 21    	call getpixel
0268   20E5 82          	add a,d		; increment result
0269   20E6 57          	ld d,a		; and store it
0270   20E7             
0271   20E7             ; bottom row
0272   20E7 44          	ld b,h	; x-1
0273   20E8 05          	dec b
0274   20E9 4D          	ld c,l	; y+1
0275   20EA 0C          	inc c
0276   20EB             
0277   20EB CD 67 21    	call getpixel
0278   20EE 82          	add a,d		; increment result
0279   20EF 57          	ld d,a		; and store it
0280   20F0             
0281   20F0             ; optimization - if already >3, no need to do more checks
0282   20F0 FE 04       	cp 4
0283   20F2 30 46       	jr nc, nostore
0284   20F4             
0285   20F4 04          	inc b
0286   20F5 CD 67 21    	call getpixel
0287   20F8 82          	add a,d		; increment result
0288   20F9 57          	ld d,a		; and store it
0289   20FA             
0290   20FA             ; optimization - if already >3, no need to do more checks
0291   20FA FE 04       	cp 4
0292   20FC 30 3C       	jr nc, nostore
0293   20FE             
0294   20FE 04          	inc b
0295   20FF CD 67 21    	call getpixel
0296   2102 82          	add a,d		; increment result
0297   2103 57          	ld d,a		; and store it
0298   2104             
0299   2104             ; optimization - if already >3, no need to do more checks
0300   2104 FE 04       	cp 4
0301   2106 30 32       	jr nc, nostore
0302   2108             
0303   2108             
0304   2108             ; middle row
0305   2108 44          	ld b,h	; x-1
0306   2109 05          	dec b
0307   210A 4D          	ld c,l	; y
0308   210B             
0309   210B             
0310   210B CD 67 21    	call getpixel
0311   210E 82          	add a,d		; increment result
0312   210F 57          	ld d,a		; and store it
0313   2110             
0314   2110             
0315   2110             ; optimization - if already >3, no need to do more checks
0316   2110 FE 04       	cp 4
0317   2112 30 26       	jr nc, nostore
0318   2114             
0319   2114 04          	inc b	; x+1
0320   2115 04          	inc b
0321   2116 CD 67 21    	call getpixel
0322   2119 82          	add a,d		; increment result
0323   211A 57          	ld d,a		; and store it
0324   211B             
0325   211B             ; ok now d = number of active neighbour pixels
0326   211B             ; >4 = die
0327   211B             ; <2 = die
0328   211B FE 04       	cp 4
0329   211D 30 1B       	jr nc, nostore
0330   211F FE 02       	cp 2
0331   2121 38 17       	jr c, nostore
0332   2123             
0333   2123             ; so d=2 or 3 now
0334   2123             ; are we alive?
0335   2123             
0336   2123 44          	ld b,h
0337   2124 4D          	ld c,l
0338   2125 CD 67 21    	call getpixel
0339   2128             
0340   2128             ; now a = 1 = we are alive
0341   2128             ; if live we stay alive, so decision to live made
0342   2128 FE 01       	cp 1
0343   212A 28 07       	jr z, live
0344   212C             
0345   212C             ; if dead check d = 3
0346   212C             ; and make live if so
0347   212C             
0348   212C             dead:
0349   212C 7A          	ld a,d
0350   212D FE 03       	cp 3
0351   212F 28 02       	jr z, live
0352   2131 18 07       	jr nostore		; die; no need to write a 0 as we start with buff b = all 0
0353   2133             
0354   2133             live:
0355   2133 3E 01       	ld a,1
0356   2135             
0357   2135             store:
0358   2135 44          	ld b,h
0359   2136 4D          	ld c,l
0360   2137 CD 93 21    	call putpixel
0361   213A             
0362   213A             
0363   213A             ; next pixel
0364   213A             
0365   213A             nostore:
0366   213A 2C          	inc l
0367   213B 7D          	ld a,l
0368   213C             
0369   213C FE 2E       	cp 2eh				; 2fh = 0..47; needs n-1 due border pixel
0370   213E 20 84       	jr nz, tinner
0371   2140             
0372   2140 24          	inc h
0373   2141 7C          	ld a,h
0374   2142 FE 52       	cp 52h				; 53h = 0..83; needs n-1 due border pixel
0375   2144 C2 B6 20    	jp nz, touter
0376   2147             
0377   2147             
0378   2147             
0379   2147             
0380   2147             
0381   2147             
0382   2147             
0383   2147             
0384   2147             ; copy buffer b to buffer a ready for next round
0385   2147             
0386   2147 01 F8 01    	ld bc,504
0387   214A 21 DF 23    	ld hl,buffb
0388   214D 11 E7 21    	ld de,buffa
0389   2150 ED B0       	ldir
0390   2152             
0391   2152             
0392   2152             
0393   2152             
0394   2152             
0395   2152 C3 77 20    	jp mainloop
0396   2155             
0397   2155             
0398   2155             ; ----------------------------------------------------------------------------
0399   2155             ; Generate a random number 0<=255 return it in A register
0400   2155             ; ----------------------------------------------------------------------------
0401   2155             
0402   2155             getrandom:
0403   2155 E5                  push    hl
0404   2156 D5                  push    de
0405   2157 2A D7 25            ld      hl,(rndData)
0406   215A ED 5F               ld      a,r
0407   215C 57                  ld      d,a
0408   215D 5E                  ld      e,(hl)
0409   215E 19                  add     hl,de
0410   215F 85                  add     a,l
0411   2160 AC                  xor     h
0412   2161 22 D7 25            ld      (rndData),hl
0413   2164 D1                  pop     de
0414   2165 E1                  pop     hl
0415   2166 C9                  ret
0416   2167             
0417   2167             
0418   2167             ; ----------------------------------------------------------------------------
0419   2167             ; Get the living or dead flag (1=living) from buff a
0420   2167             ; pointer b=x c=y
0421   2167             ; return with a = pixel status in bit 0
0422   2167             ;
0423   2167             ; the pixel buffer is 6 rows of 84 bytes = 504 bytes
0424   2167             ; each byte contains 8 pixels
0425   2167             ;
0426   2167             ; byte = x+(84*(y/8))
0427   2167             ; bit = y and 7
0428   2167             ; ----------------------------------------------------------------------------
0429   2167             
0430   2167             getpixel:
0431   2167 C5          	push bc
0432   2168 D5          	push de
0433   2169 E5          	push hl
0434   216A             
0435   216A 51          	ld d,c		; store Y in d for later
0436   216B             
0437   216B 21 E7 21    	ld hl,buffa	; setup base pointer
0438   216E 48          	ld c,b		; add X offset to it
0439   216F 06 00       	ld b,0
0440   2171 09          	add hl,bc
0441   2172             
0442   2172             
0443   2172 7A          	ld a,d		; work out which row
0444   2173 CB 2F       	sra a
0445   2175 CB 2F       	sra a
0446   2177 CB 2F       	sra a
0447   2179             
0448   2179 01 54 00    	ld bc,84	; width of a bitmap row
0449   217C             
0450   217C             
0451   217C B7          lp:	or a		; move up the offset; was cp 0
0452   217D 28 04       	jr z, nxt
0453   217F             
0454   217F 09          	add hl,bc	; add the offset
0455   2180 3D          	dec a
0456   2181 18 F9       	jr lp
0457   2183             
0458   2183 7A          nxt:	ld a,d		; grab our Y byte back
0459   2184 E6 07       	and 07h		; mask off bits to work out which bit we want
0460   2186 47          	ld b,a
0461   2187 04          	inc b		; set loop counter
0462   2188             
0463   2188 7E          	ld a,(hl)	; get the byte that holds our bit
0464   2189             
0465   2189             rrloop:
0466   2189 0F          	rrca		; put the correct bit in carry
0467   218A 10 FD       	djnz rrloop
0468   218C             
0469   218C 17          	rla		; grab from carry back to a register bit 0
0470   218D E6 01       	and 1		; mask off junk
0471   218F             
0472   218F E1          	pop hl
0473   2190 D1          	pop de
0474   2191 C1          	pop bc
0475   2192             
0476   2192 C9                  ret
0477   2193             
0478   2193             
0479   2193             
0480   2193             
0481   2193             ; ----------------------------------------------------------------------------
0482   2193             ; Set the living or dead flag (1=living) to buff b
0483   2193             ; pointer b=x c=y
0484   2193             ; value a = pixel status in bit 0
0485   2193             ;
0486   2193             ; the pixel buffer is 6 rows of 84 bytes = 504 bytes
0487   2193             ; each byte contains 8 pixels
0488   2193             ;
0489   2193             ; byte = x+(84*(y/8))
0490   2193             ; bit = y and 7
0491   2193             ; ----------------------------------------------------------------------------
0492   2193             
0493   2193             putpixel:
0494   2193 C5          	push bc
0495   2194 D5          	push de
0496   2195 E5          	push hl
0497   2196             
0498   2196 5F          	ld e,a		; save bit value we are storing
0499   2197 51          	ld d,c		; save Y in d for later
0500   2198             
0501   2198             
0502   2198 21 DF 23    	ld hl,buffb
0503   219B 48          	ld c,b		; add X offset to it
0504   219C 06 00       	ld b,0
0505   219E 09          	add hl,bc
0506   219F             
0507   219F             
0508   219F 7A          	ld a,d		; work out which row
0509   21A0 CB 2F       	sra a
0510   21A2 CB 2F       	sra a
0511   21A4 CB 2F       	sra a
0512   21A6             
0513   21A6 01 54 00    	ld bc,84	; width of a bitmap row
0514   21A9             
0515   21A9             
0516   21A9 B7          lp2:	or a		; move up the offset; was cp 0
0517   21AA 28 04       	jr z, nxt2
0518   21AC             
0519   21AC 09          	add hl,bc	; add the offset
0520   21AD 3D          	dec a
0521   21AE 18 F9       	jr lp2
0522   21B0             
0523   21B0             
0524   21B0             
0525   21B0             
0526   21B0 7A          nxt2:	ld a,d		; grab our byte back
0527   21B1 E6 07       	and 07h		; mask off bits to work out which bit we want
0528   21B3 47          	ld b,a
0529   21B4 04          	inc b
0530   21B5 7B          	ld a,e		; fetch our bit
0531   21B6 0F          	rrca		; adjust it because we do at least one RLCA for bit 0
0532   21B7             
0533   21B7             rrloop2:
0534   21B7 07          	rlca		; put bit in right place
0535   21B8 10 FD       	djnz rrloop2
0536   21BA             
0537   21BA             
0538   21BA 46          	ld b,(hl)	; get current byte value
0539   21BB B0          	or b		; insert our new bit from (originally) a register
0540   21BC 77          	ld (hl),a	; put the byte back where it came from
0541   21BD             
0542   21BD             bail:
0543   21BD E1          	pop hl
0544   21BE D1          	pop de
0545   21BF C1          	pop bc
0546   21C0             
0547   21C0 C9                  ret
0548   21C1             
0549   21C1             
0550   21C1             
0551   21C1             ; ----------------------------------------------------------------------------
0552   21C1             ; write COMMAND to the SPI bus
0553   21C1             ;
0554   21C1             ; d = command/data 00 = commandh, 08 = data
0555   21C1             ; e = data byte
0556   21C1             ; ----------------------------------------------------------------------------
0557   21C1             
0558   21C1             spi_wr:
0559   21C1 F5          	push af
0560   21C2 C5          	push bc
0561   21C3 D5          	push de
0562   21C4             
0563   21C4 0E 42       	ld c,spiport
0564   21C6 06 08       	ld b,8		; 8 BITS
0565   21C8             
0566   21C8 3E E4       nbit2:	ld a,0e4h	; chip select,command low
0567   21CA 82          	add a,d		; add in the command/data register
0568   21CB CB 7B       	bit 7,e
0569   21CD 28 02       	jr z, no
0570   21CF CB C7       	set 0,a
0571   21D1             
0572   21D1 ED 79       no:	out (c),a
0573   21D3 CB CF       	set 1,a		; set CLK
0574   21D5 ED 79       	out (c),a
0575   21D7 CB 8F       	res 1,a		; clear CLK
0576   21D9 ED 79       	out (c),a
0577   21DB             
0578   21DB CB 03       	rlc e		; next bit
0579   21DD             
0580   21DD 10 E9       	djnz nbit2
0581   21DF             
0582   21DF 3E F4       	ld a,0f4h	; raise CS
0583   21E1 ED 79       	out (c),a
0584   21E3             
0585   21E3 D1          	pop de
0586   21E4 C1          	pop bc
0587   21E5 F1          	pop af
0588   21E6 C9          	ret
0589   21E7             
0590   21E7             
0591   21E7             
0592   21E7             ; ----------------------------------------------------------------------------
0593   21E7             ;	data, variables, etc.
0594   21E7             ; ----------------------------------------------------------------------------
0595   21E7             
0596   21E7             buffa	.ds 504		; (84*48 pixels)/8 pixels per byte
0597   23DF             
0598   23DF             buffb	.ds 504
0599   25D7             
0600   25D7 00 00       rndData	.dw 0
0601   25D9             
0602   25D9 00          flag	.db 0
0603   25DA             
0604   25DA             
0605   25DA             
0606   25DA             ; ----------------------------------------------------------------------------
0607   25DA             ; end of our code and data, end of program. goodbye!
0608   25DA             ; ----------------------------------------------------------------------------
0609   25DA             
0610   25DA             	.end
tasm: Number of errors = 0
